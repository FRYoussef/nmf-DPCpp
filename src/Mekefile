VENDOR      = intel
OPTIMIZE    = yes
DEBUG       = no
DEVICE      = cpu # {cpu, nvidia, igpu}
KERNEL     = bare # {bare, blas, cublas}


# Standard flags
CFLAGS := -std=c++11 -Wall

# Linker flags
LDFLAGS = -lm

# Program code
PFLAGS = CPU_DEVICE BARE_KERNEL

ifeq ($(DEVICE), nvidia)
  PFLAGS = NVIDIA_DEVICE
else ifeq ($(DEVICE), igpu)
  PFLAGS = INTEL_IGPU_DEVICE
else
  PFLAGS = CPU_DEVICE
endif

ifeq ($(KERNEL), blas)
  PFLAGS += BLAS_KERNEL
else ifeq ($(KERNEL), cublas)
  ifeq ($(DEVICE), nvidia)
    PFLAGS += CUBLAS_KERNEL
  else
    PFLAGS += BARE_KERNEL
  endif
else
  PFLAGS += BARE_KERNEL
endif

# Intel DPC++ Compiler
ifneq (,$(findstring intel,$(VENDOR)))
  CC = clang++
  CFLAGS += -fsycl -fsycl-unnamed-lambda
  LDFLAGS += 
endif

# Flags for nvidia gpu
ifneq (,$(findstring nvidia, $(DEVICE)))
  CFLAGS += -fsycl-targets=nvptx64-nvidia-cuda-sycldevice
endif

# Debug Flags
ifeq ($(DEBUG),yes)
  CFLAGS += -g  -DOUTPUT
endif

# Optimization Flags
ifeq ($(OPTIMIZE),yes)
  CFLAGS += -O3
endif

backprop: backprop_sycl.o backprop.o imagenet.o facetrain.o
	$(CC) $(CFLAGS) backprop_sycl.o backprop.o imagenet.o facetrain.o -o backprop $(LDFLAGS)

%.o: %.[ch]
	$(CC) $(CFLAGS) $< -c

backprop_sycl.o: backprop_sycl.cpp bpnn_adjust_weights.sycl  bpnn_layerforward.sycl
	$(CC) $(CFLAGS) backprop_sycl.cpp -c
	
backprop.o: backprop.c 
	$(CC) $(CFLAGS) backprop.c -c
	
facetrain.o: facetrain.c
	$(CC) $(CFLAGS) facetrain.c -c

imagenet.o: imagenet.c
	$(CC) $(CFLAGS) imagenet.c -c

run: backprop
	./backprop 65536

clean:
	rm -f *.o *~ backprop *.linkinfo